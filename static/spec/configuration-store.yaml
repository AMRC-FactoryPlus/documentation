openapi: 3.0.0
info:
  title: Factory+ Config Store
  description: Factory+ Config Store
  version: 1.0.0

servers:
  -   url: /v1

security:
  - basic: []
  - gssapi: []
  - bearer: []

# NOTE: This API is rooted at /v1 on its server. The servers: entry
# above records this. This means that the URLs passed to the server are
# actually /v1/config and so on.
paths:
  /object:
    get:
      summary: List all objects in the Configuration Store
      responses:
        "200":
          description: Get a list of all registered objects
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UuidList" }
    post:
      summary: Register a new object
      requestBody:
        description: New object information
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ObjectRegistration" }
      responses:
        "200":
          description: Object already registered.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ObjectRegistration" }
        "201":
          description: Object newly registered.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ObjectRegistration" }
        "400":
          description: Invalid class UUID (not a class).
        "404":
          description: Class not found.
        "409":
          description: Object already registered as a different class.

  /app:
    get:
      summary: List the known applications
      responses:
        "200":
          description: List of the registered apps.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UuidList" }
        "401":
          description: Unauthenticated access
        "403":
          description: Unauthorised acccess
    post:
      summary: Register an application with the Configuration Store
      requestBody:
        description: The application summary information
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Application" }
      responses:
        "204":
          description: Application registered
        "401":
          description: Unauthenticated access
        "403":
          description: Unauthorised access

  /app/{app}:
    parameters:
      -   { $ref: "#/components/parameters/app" }
    get:
      summary: Return information about a registered application
      responses:
        "200":
          description: Information about the application.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Application" }
        "404":
          description: Application not known
        "401":
          description: Unauthenticated access
        "403":
          description: Unauthorised access

  /app/{app}/config:
    parameters:
      -   { $ref: "#/components/parameters/app" }
    get:
      summary: Get the general configuration for an application
      responses:
        "200":
          description: Application configuration.
          content:
            application/json: {}
        "404":
          description: Application config not set
    put:
      summary: Set the general configuration for an application
      requestBody:
        description: Application configuration.
        required: true
        content:
          application/json: {}
      responses:
        "204":
          description: Config set
        "403":
          description: Config not valid according to schema.
        "404":
          description: Application not known
    delete:
      summary: Delete the general configuration for an application
      responses:
        "204":
          description: Config deleted
        "404":
          description: Application not known

  /app/{app}/config-schema:
    parameters:
      -   { $ref: "#/components/parameters/app" }
    get:
      summary: Fetch the JSON schema for an application.
      responses:
        "200":
          description: Application schema.
          content:
            application/json: {}
        "404":
          description: Application not found or schema not set.
    put:
      summary: Set the JSON schema for an application.
      requestBody:
        description: New schema for application.
        required: true
        content:
          application/json: {}
      responses:
        "204":
          description: Schema updated successfully.
        "404":
          description: Application not registered.
        "409":
          description: >
            The existing config information for this application
            does not validate against the new schema. The
            new schema has been rejected. Returns a list of
            devices for which validation failed.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UuidList" }


  /app/{app}/search:
    get:
      summary: Search for configs by property values.
      parameters:
        -   { $ref: "#/components/parameters/app" }
        -   name: query
            in: query
            style: form
            explode: true
            schema:
              type: object
              # These are schema'd as type:string, but they
              # are expected to be JSON scalar values.
              additionalProperties:
                type: string
      responses:
        "200":
          description: >
            List of objects found. If result properties were
            requested, this will be a list of objects,
            otherwise it will be a plain list of UUIDs.
          content:
            application/json:
              schema:
                oneOf:
                  -   { $ref: "#/components/schemas/UuidList" }
                  -   type: array
                      items:
                        type: object
                        required: [uuid]
                        properties:
                          uuid: { type: string, format: uuid }

  /app/{app}/{kind}:
    get:
      summary: Find all the objects of this kind this application has configuration for.
      parameters:
        -   { $ref: "#/components/parameters/app" }
        -   { $ref: "#/components/parameters/kind" }
      responses:
        "200":
          description: List of devices we have config for.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/UuidList" }
        "401":
          description: Unauthenticated access
        "403":
          description: Unauthorised access

  /app/{app}/{kind}/{object}:
    parameters:
      -   { $ref: "#/components/parameters/app" }
      -   { $ref: "#/components/parameters/kind" }
      -   { $ref: "#/components/parameters/object" }
    get:
      summary: Get config for a particular object.
      responses:
        "200":
          description: Config for the object
          content:
            application/json: {}
    put:
      summary: Set config for a particular object.
      requestBody: { $ref: "#/components/requestBodies/config" }
      responses:
        "204":
          description: Config successfully recorded
        "404":
          description: Application not known
        "401":
          description: Unauthorised access
        "403":
          description: Config not valid according to schema
        "405":
          description: Invalid operation for object registration.
    delete:
      summary: Delete config for a particular object.
      responses:
        "204":
          description: Config delete
        "404":
          description: Application or object not known
        "401":
          description: Unauthenticated access
        "405":
          description: Invalid operation for object registration.

  /load:
    parameters:
      -   name: overwrite
          description: Specifies whether existing entries are overwritten.
          in: query
          style: form
          explode: false
          schema:
            type: string
            enum: [true, false, yes, no, on, off, "1", "0"]
    post:
      summary: Load a dump into the database.
      requestBody:
        description: Dump to load.
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/Dumpfile" }
      responses:
        "204":
          description: Dump loaded.
        "400":
          description: Bad dump file format.
        "404":
          description: Required object not found.
        "409":
          description: Conflict with existing entry.

  /save:
    get:
      summary: Retrieve a dump of the whole database.
      responses:
        "200":
          description: Dump file.
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Dumpfile" }


components:
  securitySchemes:
    basic:
      type: http
      description: User/password HTTP Basic auth
      scheme: Basic
    gssapi:
      type: http
      description: GSSAPI/Kerberos HTTP auth
      scheme: Negotiate
    bearer:
      type: http
      description: Token HTTP auth
      scheme: Bearer

  parameters:
    app:
      description: The application UUID.
      name: app
      in: path
      required: true
      schema: { type: string, format: uuid }
    kind:
      description: The type of object.
      name: kind
      in: path
      required: true
      schema:
        type: string
        enum: ["object", "class", "device", "schema", "app"]
    object:
      description: The object UUID.
      name: object
      in: path
      required: true
      schema: { type: string, format: uuid }

  requestBodies:
    config:
      description: A config snippet to store
      required: true
      content:
        application/json:
          schema: { type: object }

  schemas:
    Application:
      description: Information about a registered application.
      type: object
      required: [uuid, name]
      properties:
        uuid: { type: string, format: uuid }
        name:
          type: string
          description: A human-readable name for the application.

    ObjectRegistration:
      description: Object registration information
      type: object
      required: [class]
      properties:
        uuid: { type: string, format: uuid }
        class: { type: string, format: uuid }

    UuidList:
      description: A list of UUIDs
      type: array
      items: { type: string, format: uuid }

    Dumpfile:
      description: Dump file for bootstrapping
      type: object
      required: [service, version]
      properties:
        service:
          description: Identifies the service this dump belongs to.
          const: "af15f175-78a0-4e05-97c0-2a0bb82b9f3b"
        version:
          description: Dump file format version number.
          const: 1
        classes:
          description: List of classes to create.
          type: array
          items:
            type: string
            format: uuid
        objects:
          description: Objects to create.
          type: object
          propertyNames:
            description: The Class to create objects in.
            type: string
            format: uuid
          additionalProperties:
            description: A list of Objects to create.
            type: array
            items:
              type: string
              format: uuid
        configs:
          description: Config entries to create.
          type: object
          propertyNames:
            description: The Application to create config entries under.
            type: string
            format: uuid
          additionalProperties:
            description: Config entries to create.
            type: object
            propertyNames:
              description: The Object to create an entry for.
              type: string
              format: uuid
            additionalProperties:
              description: The config entry to create.
